Seitenanzahl: min 50 nur Inhalt (~70 insgesamt)
Referenzen: 30 (~2 Seiten)

motivation!!!

Frage:
	soll range nochmal in notation table?
	4 problem scenario in den Vordergrund oder letzte phase (competition undso) (Ziel oder Weg zum Ziel?)

IDEAS:
descripte effect of discount factor delta: 0 -> myopic, 1 -> long-term
überblick über scenarien in tabelle
lessons learned
write about refactored example merchants (+inventory)?
more eval for joint pricing/ordering?
platform architecture write about microservices?
mention: profit goal, alternative revenue, min cost etc
write about benchmark tool implementation? (e.g. calls docker-compose)
mention: features only on price, but can be used on quality, rating etc.
abstract: mention joint pricing + ordering
pdf metadata
abstract: add info about phases
abstract: write about speed improvement
annotate platform architecture diagram
maybe write more in merchant chapter intro

CHECK:
consistent use of item/product
merchant: mention run training in background
equations resf in text
mention cpu for performance test
features is function on market situation
order delay == delivery time
gleichzeitige Verkäufe im Graph?
chapters start at odd page
use 'order delivery delay'
t = 0, ..., T-1

TODO:
rainers feedback einarbeiten
fr 11 Uhr Treffen
finish Related Work (part: ivnentory opti, price opti joint opti, demand learning, platform), schaue martins notes an
intro: zu harter einstieg
intro: paper strucutre
describe consumer in first eval (or gradualy)
use prob function for ordering numeric example instead of explicit values
show better start value = faster convergence (but start value independent from n does nothing) (wie viele iterationen für optimale Politik nötig?)
compare different parameters in numeric example joint
introduce start value u later in convergence section
check functions in dyn learning evaluation
reproduzierbares duopoly oligopoly
pricewars platform motivation (siehe martin feedback)
eval: show resulting expected profit over time; argument for use of start parameter
eval efficiency: fix start value paragraph
improve merchant architecture graph
in section 6 auf merchant impl verweisen
platformerweiterung: misc: neues consumer behavior, vereinheitlichung merchants + order decision, bug fixes
dauer der simulation hinschreiben für Reproduzierbarkeit
mention in twobound vs data-driven: mention max price bound is too low for this situation
mention implementation section when describing merchant sections
consistent: period t, period (t,t+1)
merchant architecture: describe more in caption
platform extension: replace screenshot of inventory chart with download
table speed up dyn progamming: better name for "optimization method" name is ambigeous with profit optimization
dyn programming speedup make results reproducible
define "market situation"
write a*, b* with input vec(x)
platform architecture: do not use bullet point "Kafka Reverse Proxy"?
ref notation table in text
conclusion refinement
mo 14.5. drucken und abgeben
di 15.5. Notfalltag

EVAL:
Graph V_0(n) für verschiedene n -> zeige, dass erwarteter profit kaum von n abhängt
konvergenz zeigen für verschiedene n in V_0(n) ?
show profit after changing pricing/ordering policy -> wie entscheident ist pricing/ordering?

glossary:
item, product, market situation, model vs demand model, decision interval, UI, REST, API, http















README:
UI
marketplace
schreibe über lagerkosten
